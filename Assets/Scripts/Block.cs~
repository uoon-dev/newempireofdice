using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using DG.Tweening;
using RedBlueGames.Tools.TextTyper;
using Controllers.TutorialController;

public class Block : MonoBehaviour
{
    [SerializeField] Sprite clearLandImage = null;
    [SerializeField] Sprite clearLandOccupiedImage = null;
    [SerializeField] Sprite destroyableBlockImage = null;
    [SerializeField] Sprite mineImage = null;
    [SerializeField] Sprite dungeonImage = null;
    [SerializeField] Sprite armyImage = null;
    [SerializeField] Sprite armySlotImage = null;
    [SerializeField] Sprite wizardImage = null;
    [SerializeField] Sprite wizardSlotImage = null;
    [SerializeField] Sprite relicsImage = null;
    [SerializeField] Sprite relicsSlotImage = null;
    [SerializeField] Sprite horizontalImage = null;
    [SerializeField] Sprite verticalImage = null;
    [SerializeField] Sprite bombImage = null;
    [SerializeField] Sprite mineBackgroundImage = null;
    [SerializeField] Sprite dungeonBackgroundImage = null;
    [SerializeField] Sprite armyBackgroundImage = null;
    [SerializeField] Sprite wizardBackgroundImage = null;
    [SerializeField] Sprite relicsBackgroundImage = null;
    [SerializeField] Sprite horizontalBackgroundImage = null;
    [SerializeField] Sprite verticalBackgroundImage = null;
    [SerializeField] Sprite bombBackgroundImage = null;
    [SerializeField] Sprite lastBlockImage = null;
    [SerializeField] Sprite lastBlockFinalImage = null;
    [SerializeField] GameObject backsideTooltipImageObject = null;
    [SerializeField] GameObject tooltip = null;
    [SerializeField] GameObject ddackBody = null;
    [SerializeField] GameObject specialBlockEffect = null;
    int minNumber = 1;
    int maxNumber = 6;
    int posX, posY;
    int blockSize = 46;
    int blocksLength;
    int destroyedDiceCount = 0;
    public bool isDestroyed = false;
    public bool isClickable = false;
    string blocksType = "";
    Text blockText;
    private static int slotOrder1 = 0;
    private static int slotOrder2 = 0;
    private static Vector3 firstBlockPosition;
    private static Vector3 lastBlockPosition;

    void Start()
    {
        SetBlocksValue();
        
        if (tooltip != null) 
        {
            HideTooltip();
        }

        slotOrder1 = 0;
        slotOrder2 = 0;        
    }

    private void SetBlocksValue()
    {
        var blocks = FindObjectsOfType<Block>();
        int randomNum = 0;

        posX = (int)transform.localPosition.x / blockSize;
        posY = (int)transform.localPosition.y / blockSize;
        blocksLength = (int)Mathf.Sqrt(blocks.Length);
        randomNum = (Random.Range(1, (int)minNumber + posX + (int)maxNumber + posY));

        if (LevelLoader.GetCurrentSceneName() == "Level 1") {
            randomNum = GetTutorialBlocksValue(posX, posY);
        }

        blockText = GetComponentInChildren<Text>();
        blockText.text = randomNum.ToString();

        GetComponentsInChildren<Image>()[0].color = new Color32(255, 255, 255, 0);
        GetComponentsInChildren<Image>()[1].color = new Color32(255, 255, 255, 0);

        // Set First block clickable
        if (posX == 1 && posY == 1)
        {
            isClickable = true;
            GetComponentsInChildren<Image>()[0].sprite = destroyableBlockImage;
            GetComponentsInChildren<Image>()[0].color = new Color32(255, 255, 255, 255);
            firstBlockPosition = transform.position;
        }

        // Set Last block text
        if (posX == blocksLength && posY == blocksLength)
        {
            GetComponentsInChildren<Image>()[0].sprite = lastBlockImage;
            GetComponentsInChildren<Image>()[0].color = new Color32(255, 255, 255, 255);
            GetComponentsInChildren<Image>()[0].transform.localPosition = new Vector3(0.7f, 3.8f, 1);
            lastBlockPosition = transform.position;

            int lastBlockCount = FindObjectOfType<SpeicalBlockController>().GetLastBlockNumber(); 
            if (lastBlockCount > 0) 
            {
                blockText.text = lastBlockCount.ToString();
            }

            Text[] texts = GetComponentsInChildren<Text>();
            texts[1].text = "마왕성";
            blocksType = "마왕성";
        }
    }

    private int GetTutorialBlocksValue(int posX, int poxY) {
        if (posX == 1 && posY == 1) {
            return 1;
        }

        if (posX == 2 && posY == 1) {
            return 5;
        }

        if (posX == 3 && posY == 1) {
            return 9;
        }

        if (posX == 1 && posY == 2) {
            return 11;
        }

        if (posX == 2 && posY == 2) {
            return 14;
        }

        if (posX == 3 && posY == 2) {
            return 16;
        }

        if (posX == 1 && posY == 3) {
            return 15;
        }

        if (posX == 2 && posY == 3) {
            return 18;
        }

        if (posX == 3 && posY == 3) {
            return 20;
        }

        return 1;
    }    

    private void OnMouseDown()
    {
        var attackGageDisplay = FindObjectOfType<AttackGageDisplay>();
        ReduceBlockGage(attackGageDisplay.GetAttackGage());
    }
    
    public void OnClickButton()
    {       
        var dices = FindObjectsOfType<Dice>();
        int clickedDiceCount = 0;

        foreach (Dice dice in dices)
        {
            if (dice.CheckIsClicked())
            {
                clickedDiceCount++;
            }
        }

        if (isClickable == true) {
            if (clickedDiceCount > 0) {
                var attackGageDisplay = FindObjectOfType<AttackGageDisplay>();
                ReduceBlockGage(attackGageDisplay.GetAttackGage());
            } else {
                if (blocksType != string.Empty && blocksType != "마왕성") {
                    ToggleTooltip();
                }
            }
        } else {
            if (blocksType != string.Empty && blocksType != "마왕성") {
                ToggleTooltip();
            }
        }        
    }

    public void SetTooltipInfo() 
    {
        if (tooltip == null) return;
        
        Text tooltipText = tooltip.transform.GetChild(0).GetComponent<Text>();
        
        switch (blocksType)
        {
            case "광산":
            {
                tooltipText.text = "광산: 주사위를 굴리는데 필요한 골드가 1 낮아진다";
                tooltip.SetActive(true);
                break;
            }
            case "용병": 
            {
                tooltipText.text = "용병: 점령시 '사용시 보유 중인 모든 주사위 눈에 +1' 아이템 획득";
                tooltip.SetActive(true);
                break;
            }
            case "마법사": 
            {
                tooltipText.text = "마법사: 점령시 '사용시 보유 중인 모든 주사위 눈에 x2' 아이템 획득";
                tooltip.SetActive(true);
                break;
            }
            case "유물": 
            {
                tooltipText.text = "유물: 점령시 '사용시 10배의 눈을 가진 주사위 한 개 추가(10~60, +a)' 아이템 획득";
                tooltip.SetActive(true);
                break;
            }
            case "던전": 
            {
                tooltipText.text = "던전: 주사위의 최대 눈이 1 증가한다";
                tooltip.SetActive(true);
                break;
            }
            case "공습":
            {
                tooltipText.text = "공습: 위아래 모든 땅의 방어력을 반으로 깎음";
            }
                tooltip.SetActive(true);
                break;
            case "기병대":
            {
                tooltipText.text = "기병대: 양옆 모든 땅의 방어력을 반으로 깎음";
                tooltip.SetActive(true);
                break;
            }
            case "폭탄":
            {
                tooltipText.text = "폭탄: 주변 여덟 땅의 방어력을 반으로 깎음";
                tooltip.SetActive(true);
                break;
            }
        }
    }

   IEnumerator WaitForSecond()
    {
        yield return new WaitForSeconds(3);
    }

    public void ToggleTooltip()
    {
        bool isShownTooltip = tooltip.GetComponent<CanvasGroup>().blocksRaycasts;
        if (isShownTooltip)
        {
            CloseTooltip();
        }
        else
        {
            ShowTooltip();
        }
    }

    public void ShowTooltip()
    {
        tooltip.transform.DOMoveY(tooltip.transform.position.y - 4, 0);
        tooltip.GetComponent<CanvasGroup>().blocksRaycasts = true;
        tooltip.GetComponent<ContentSizeFitter>().horizontalFit = ContentSizeFitter.FitMode.PreferredSize;
        backsideTooltipImageObject.transform.DOLocalMoveX(tooltip.transform.GetChild(0).GetComponent<RectTransform>().sizeDelta.x / 2 - 35, 0);
        tooltip.GetComponent<CanvasGroup>().DOFade(1, 0);
        tooltip.transform.DOMoveY(tooltip.transform.position.y, 0.1f);
    }

    public void HideTooltip() 
    {
        if (tooltip == null) return;
        tooltip.GetComponent<CanvasGroup>().DOFade(0, 0);
        tooltip.GetComponent<CanvasGroup>().blocksRaycasts = false;
        tooltip.transform.DOMoveY(tooltip.transform.position.y + 8, 0);
    }

    public void CloseTooltip() 
    {
        if (tooltip == null) return;
        tooltip.transform.DOMoveY(tooltip.transform.position.y - 8, 0.1f).OnComplete(() => {
            HideTooltip();
        });
    }

    private void ReduceBlockGage(string attackGage)
    {
        var dices = FindObjectsOfType<Dice>();
        var resetDiceController = FindObjectOfType<ResetDiceController>();

        if (TutorialController.GetTutorialCount() == 8) {
            int clickedDiceCount = 0;
            foreach (Dice dice in dices)
            {
                if (dice.CheckIsClicked())
                {
                    clickedDiceCount++;
                }
            }            
            if (clickedDiceCount != 6) {
                return;
            }
        }

        foreach (Dice dice in dices)
        {
            if (dice.CheckIsClicked())
            {
                dice.DestoryDice();
            }
        }

        // 블록의 남은 게이지
        int resultGage = int.Parse(blockText.text) - int.Parse(attackGage);
        if (resultGage <= 0)
        {
            ChangeDestroyedBlockDisplay(resultGage);
            MakeNextBlockClickable();
            if (LevelLoader.GetCurrentSceneName() == "Level 1") {            
                ControllTutorialBlock();
            }

            resetDiceController.AddMoneyAfterKill();
            isClickable = false;
        }
        else
        {
            if (TutorialController.GetTutorialCount() == 10) {
                ControllTutorialBlock();
            }
            blockText.text = resultGage.ToString();
        }

        resetDiceController.IncreaseTurnCount();        
        resetDiceController.ToggleResetDiceButton();

        // 남은 주사위 개수가 0이고 돈이 없으면 No Dice Screen 띄우기
        FindObjectOfType<NoDiceNoCoinController>().ToggleScreen();

        destroyedDiceCount = 0;
        
    }

    private void ControllTutorialBlock() {
        if (TutorialController.GetTutorialCount() == 5 || 
            TutorialController.GetTutorialCount() == 8 ||
            TutorialController.GetTutorialCount() == 10) {
            TextTyperTester.Jump();
            TutorialController.ToggleCanvasBody(1);
            TutorialController.AllowClickEventNextButton();
            TutorialController.PreventClickEventDices();
            if (TutorialController.GetTutorialCount() == 6) {
                TutorialController.ControllArrowUI();
            }
        }
    }

    private void ChangeDestroyedBlockDisplay(int resultGage)
    {
        isDestroyed = true;

        // todo ddack!
        if (resultGage == 0)
        {
            int randomNumber = Random.Range(0, 3);
            GetComponentsInChildren<Image>()[0].sprite = clearLandOccupiedImage;
            ddackBody.GetComponentsInChildren<Image>()[randomNumber].enabled = true;
            FindObjectOfType<StatisticsController>().UpdateFactor01();
            FindObjectOfType<ResetDiceController>().ResetOneDice();
        }
        else
        {
            GetComponentsInChildren<Image>()[0].sprite = clearLandImage;
            FindObjectOfType<StatisticsController>().UpdateFactor02();
        }
        // GetComponent<BoxCollider2D>().enabled = false;
        // GetComponentInChildren<Button>().interactable = false;
        blockText.text = "";
        GetComponentsInChildren<Text>()[1].text = "";
        GetSpecialBlockReward();
        FindObjectOfType<SpeicalBlockController>().IncreaseLastBlockGage();
    }

    private void GetSpecialBlockReward()
    {
        var resetDiceButton = FindObjectOfType<ResetDiceController>();
        var powerUpController = FindObjectOfType<PowerUpController>();
        Dice[] dices = FindObjectsOfType<Dice>();
        Block[] blocks = FindObjectsOfType<Block>();        

        switch (blocksType)
        {
            case "광산":
                EffectSoundController.instance.PlaySoundByName(EffectSoundController.SOUND_NAME.REWARD_MINE);
                int currentCost = resetDiceButton.GetCost();
                if (currentCost == 1)
                {
                    // 주사위 굴리는 비용이 1이면 더 삭감하지 않기
                    resetDiceButton.SetCost(1);
                }
                else
                {
                    resetDiceButton.SetCost(--currentCost);
                }
                break;
            case "용병": {
                Transform selectedSlot = GetSelectedSlot();

                Button button = selectedSlot.transform.GetChild(1).GetComponent<Button>();
                button.onClick.RemoveAllListeners();
                button.onClick.AddListener(() => IncreaseDiceNumberBySpeicalBlock(1, selectedSlot));
                button.enabled = true;

                Image image = selectedSlot.transform.GetChild(1).GetComponent<Image>();
                image.sprite = armySlotImage;

                var canvasGroup = selectedSlot.transform.GetChild(1).GetComponent<CanvasGroup>();
                canvasGroup.DOFade(1, 0);
                break;
            }
            case "마법사": {
                Transform selectedSlot = GetSelectedSlot();

                Button button = selectedSlot.transform.GetChild(1).GetComponent<Button>();
                button.onClick.RemoveAllListeners();
                button.onClick.AddListener(() => IncreaseDiceNumberBySpeicalBlock(2, selectedSlot));
                button.enabled = true;

                Image image = selectedSlot.transform.GetChild(1).GetComponent<Image>();
                image.sprite = wizardSlotImage;

                var canvasGroup = selectedSlot.transform.GetChild(1).GetComponent<CanvasGroup>();
                canvasGroup.DOFade(1, 0);                
                break;
            }
            case "유물": {
                Transform selectedSlot = GetSelectedSlot();

                Button button = selectedSlot.transform.GetChild(1).GetComponent<Button>();
                button.onClick.RemoveAllListeners();
                button.onClick.AddListener(() => MultiplyDiceNumberBySpeicalBlock(selectedSlot));
                button.enabled = true;

                Image image = selectedSlot.transform.GetChild(1).GetComponent<Image>();
                image.sprite = relicsSlotImage;
                
                var canvasGroup = selectedSlot.transform.GetChild(1).GetComponent<CanvasGroup>();
                canvasGroup.DOFade(1, 0);

                break;
            }
            case "던전": {
                EffectSoundController.instance.PlaySoundByName(EffectSoundController.SOUND_NAME.REWARD_DUNGEON);
                resetDiceButton.SetAttackPower(dices[0].GetMaxNumber());

                foreach (Dice dice in dices)
                {
                    dice.AddMaxNumber();
                }
                break;
            }
            case "기병대":
                foreach (Block block in blocks)
                {
                    if (!block.isDestroyed)
                    {
                        if (block.GetPosY() == posY)
                        {
                            blockText = block.GetComponentsInChildren<Text>()[0];
                            blockText.text =
                                Mathf.Ceil(float.Parse(blockText.text)/2f).ToString();
                        }
                    }
                }
                ShowEffectHorizontalBlock();
                break;
            case "공습":
                foreach (Block block in blocks)
                {
                    if (!block.isDestroyed)
                    {
                        if (block.GetPosX() == posX)
                        {
                            blockText = block.GetComponentsInChildren<Text>()[0];
                            blockText.text =
                                Mathf.Ceil(float.Parse(blockText.text)/2f).ToString();
                        }
                    }
                }
                ShowEffectVerticalBlock();
                break;
            case "폭탄":
                foreach (Block block in blocks)
                {
                    if (!block.isDestroyed)
                    {
                        if (
                            (block.GetPosX() - 1 == posX && block.GetPosY() == posY) ||
                            (block.GetPosX() - 1 == posX && block.GetPosY() + 1 == posY) ||
                            (block.GetPosX() - 1 == posX && block.GetPosY() - 1 == posY) ||
                            (block.GetPosX() == posX && block.GetPosY() + 1 == posY) ||
                            (block.GetPosX() == posX && block.GetPosY() - 1 == posY) ||
                            (block.GetPosX() + 1 == posX && block.GetPosY() == posY) ||
                            (block.GetPosX() + 1 == posX && block.GetPosY() + 1 == posY) ||
                            (block.GetPosX() + 1 == posX && block.GetPosY() - 1 == posY)
                        )
                        {
                            blockText = block.GetComponentsInChildren<Text>()[0];
                            blockText.text =
                                Mathf.Ceil(float.Parse(blockText.text)/2f).ToString();
                        }
                    }
                }
                break;
        }
    }

    public void ShowEffectHorizontalBlock()
    {
        specialBlockEffect.GetComponent<CanvasGroup>().DOFade(0, 0);
        specialBlockEffect.transform.DOMoveX(firstBlockPosition.x + 100, 0);
        specialBlockEffect.GetComponentsInChildren<Image>()[0].enabled = true;
        specialBlockEffect.GetComponent<CanvasGroup>().DOFade(1, 0.1f);
        specialBlockEffect.transform.DOMoveX(lastBlockPosition.x - 80, 1f).OnComplete(() => {
            specialBlockEffect.GetComponent<CanvasGroup>().DOFade(0, 0.1f).OnComplete(() => {
                specialBlockEffect.transform.DOMoveX(firstBlockPosition.x + 100, 0);
                specialBlockEffect.GetComponentsInChildren<Image>()[0].enabled = false;
            });
        });        
    }

    public void ShowEffectVerticalBlock()
    {
        Debug.Log(firstBlockPosition.y);
        Debug.Log(lastBlockPosition.y);
        specialBlockEffect.GetComponent<CanvasGroup>().DOFade(0, 0);
        specialBlockEffect.transform.DOMoveY(firstBlockPosition.y, 0);
        specialBlockEffect.GetComponentsInChildren<Image>()[1].enabled = true;
        specialBlockEffect.GetComponent<CanvasGroup>().DOFade(1, 0.1f);
        specialBlockEffect.transform.DOMoveY(lastBlockPosition.y - 180, 1f).OnComplete(() => {
            specialBlockEffect.GetComponent<CanvasGroup>().DOFade(0, 0.1f).OnComplete(() => {
                specialBlockEffect.transform.DOMoveY(firstBlockPosition.y, 0);
                specialBlockEffect.GetComponentsInChildren<Image>()[1].enabled = false;
            });
        });        
    }

    private void AddNewOneDice()
    {
        int diceCount = 0;

        var dices = FindObjectsOfType<Dice>();
        foreach (Dice dice in dices)
        {
            if (diceCount == 0)
            {
                if (dice.IsDestroyed())
                {
                    dice.ResetDice();
                    diceCount++;
                }
            }
        }
    }

    private void MakeNextBlockClickable()
    {
        var blocks = FindObjectsOfType<Block>();

        if (posX == (int)Mathf.Sqrt(blocks.Length) && posY == (int)Mathf.Sqrt(blocks.Length))
        {
            GetComponentsInChildren<Image>()[0].transform.localPosition = new Vector3(0, 0, 1);
            FindObjectOfType<LevelController>().WinLastBlock();
        }
        else
        {
            foreach (Block block in blocks)
            {
                if (!block.isDestroyed)
                {
                    if ((block.GetPosX() == posX && block.GetPosY() == posY + 1) ||
                    (block.GetPosX() == posX + 1 && block.GetPosY() == posY) ||
                    (block.GetPosX() == posX - 1 && block.GetPosY() == posY) ||
                    (block.GetPosX() == posX && block.GetPosY() == posY - 1))
                    {
                        // block.GetComponent<BoxCollider2D>().enabled = true;
                        block.GetComponentInChildren<Button>().interactable = true;
                        block.isClickable = true;
                        // 마왕성을 제외하고 나머지만 이미지 변경
                        if (!(block.GetPosX() == blocksLength && block.GetPosY() == blocksLength)) {
                            block.GetComponentsInChildren<Image>()[0].color = new Color32(255, 255, 255, 255);
                            block.GetComponentsInChildren<Image>()[0].sprite = destroyableBlockImage;
                        } else {
                            block.GetComponentsInChildren<Image>()[0].color = new Color32(255, 255, 255, 255);
                            block.GetComponentsInChildren<Image>()[0].sprite = lastBlockFinalImage;
                            block.transform.Find("Last Block Oval").gameObject.SetActive(true);
                        }
                    }
                }
            }
        }
    }

    public Transform GetSelectedSlot() 
    {
        var itemSlot = GameObject.Find("Item Slot");
        var slot1 = itemSlot.transform.GetChild(0);
        var slot2 = itemSlot.transform.GetChild(1);
        float isOnSlot1 = slot1.transform.GetChild(1).GetComponent<CanvasGroup>().alpha;

        if (isOnSlot1 == 0) {
            slot1.transform.GetChild(1).GetComponent<Button>().enabled = true;
            slot1.transform.GetChild(1).GetComponent<CanvasGroup>().DOFade(1, 0);
        } else {
            slot2.transform.GetChild(1).GetComponent<Button>().enabled = true;
            slot2.transform.GetChild(1).GetComponent<CanvasGroup>().DOFade(1, 0);
        }

        Transform selectedSlot = slotOrder1 > slotOrder2 ? slot2 : slot1;

        if (slotOrder1 > slotOrder2) {
            slotOrder2 = slotOrder2 + 1;
        } else {
            slotOrder1 = slotOrder1 + 1;
        }

        return selectedSlot;
    }

    public void ResetSelectedSlot(Transform slot)
    {
        slot.transform.GetChild(1).GetComponent<CanvasGroup>().DOFade(0, 0);
        slot.transform.GetChild(1).GetComponent<Button>().enabled = false;

        if (slot.gameObject.name == "Slot 1") {
            slotOrder1 = 0;
            slotOrder2 = 0;
        } else {
            slotOrder1 = 1;
            slotOrder2 = 0;
            var itemSlot = GameObject.Find("Item Slot");
            var slot1 = itemSlot.transform.GetChild(0);
            float isOnSlot1 = slot1.transform.GetChild(1).GetComponent<CanvasGroup>().alpha;

            if (isOnSlot1 == 0) {
                slotOrder1 = 0;
            }
        }
    }

    public int GetPosX()
    {
        return posX;
    }

    public int GetPosY()
    {
        return posY;
    }

    public void SetBlockType(string type)
    {
        blocksType = type;
        Text[] blockTexts = GetComponentsInChildren<Text>();
        blockTexts[1].text = type;

        Image specialBlockImg = GetComponentsInChildren<Image>()[1];
        specialBlockImg.color = new Color32(255, 255, 255, 255);

        GetComponentsInChildren<Image>()[0].color = new Color32(255, 255, 255, 255);

        switch (blocksType)
        {
            case "광산":
                specialBlockImg.sprite = mineImage;
                GetComponentsInChildren<Image>()[0].sprite = mineBackgroundImage;
                GetComponentsInChildren<Text>()[0].color = new Color32(191,155,48, 255);
                blockTexts[0].text = (int.Parse(blockTexts[0].text) + 12).ToString();
                break;
            case "던전":
                specialBlockImg.sprite = dungeonImage;
                GetComponentsInChildren<Image>()[0].sprite = dungeonBackgroundImage;
                GetComponentsInChildren<Text>()[0].color = new Color32(231,134,134, 255);
                blockTexts[0].text = (int.Parse(blockTexts[0].text) + 8).ToString();
                break;
            case "용병":
                specialBlockImg.sprite = armyImage;
                GetComponentsInChildren<Image>()[0].sprite = armyBackgroundImage;
                GetComponentsInChildren<Text>()[0].color = new Color32(113,110,110, 255);
                blockTexts[0].text = (int.Parse(blockTexts[0].text) + 4).ToString();
                break;
            case "마법사":
                specialBlockImg.sprite = wizardImage;
                GetComponentsInChildren<Image>()[0].sprite = wizardBackgroundImage;
                GetComponentsInChildren<Text>()[0].color = new Color32(146,100,172, 255);
                blockTexts[0].text = (int.Parse(blockTexts[0].text) + 12).ToString();
                break;
            case "유물":
                specialBlockImg.sprite = relicsImage;
                GetComponentsInChildren<Image>()[0].sprite = relicsBackgroundImage;
                GetComponentsInChildren<Text>()[0].color = new Color32(82,119,132, 255);
                blockTexts[0].text = (int.Parse(blockTexts[0].text) + 6).ToString();
                break;
            case "기병대":
                specialBlockImg.sprite = horizontalImage;
                GetComponentsInChildren<Image>()[0].sprite = horizontalBackgroundImage;
                GetComponentsInChildren<Text>()[0].color = new Color32(128,120,168, 255);
                blockTexts[0].text = (int.Parse(blockTexts[0].text) + 12).ToString();
                break;
            case "공습":
                specialBlockImg.sprite = verticalImage;
                GetComponentsInChildren<Image>()[0].sprite = verticalBackgroundImage;
                GetComponentsInChildren<Text>()[0].color = new Color32(128,120,168, 255);
                blockTexts[0].text = (int.Parse(blockTexts[0].text) + 12).ToString();
                break;
            case "폭탄":
                specialBlockImg.sprite = bombImage;
                GetComponentsInChildren<Image>()[0].sprite = bombBackgroundImage;
                GetComponentsInChildren<Text>()[0].color = new Color32(128,120,168, 255);
                blockTexts[0].text = (int.Parse(blockTexts[0].text) + 10).ToString();
                break;
        }
    }

    public string GetBlockType()
    {
        return blocksType;
    }

    public void IncreaseDiceNumberBySpeicalBlock(int powerupGage, Transform slot)
    {
        if (GetDestroyedDiceCount() < 6) 
        {
            var speicalBlockController = FindObjectOfType<SpeicalBlockController>();
            speicalBlockController.IncreaseDiceNumber(powerupGage);
            var attackGageDisplay = FindObjectOfType<AttackGageDisplay>();
            attackGageDisplay.SumAttackGage();
            
            ResetSelectedSlot(slot);
        }
    }

    public void MultiplyDiceNumberBySpeicalBlock(Transform slot)
    {
        if (GetDestroyedDiceCount() > 0) 
        {
            var attackGageDisplay = FindObjectOfType<AttackGageDisplay>();
            attackGageDisplay.SumAttackGage();
            
            FindObjectOfType<ResetDiceController>().ResetOneDice(10);
            ResetSelectedSlot(slot);
        }
    }

    public int GetDestroyedDiceCount() {
        Dice[] dices = FindObjectsOfType<Dice>();
        int destroyedDiceCount = 0;

        foreach (Dice dice in dices) 
        {
            if (dice.IsDestroyed() == true) destroyedDiceCount++;
        }

        return destroyedDiceCount;
    }
}
